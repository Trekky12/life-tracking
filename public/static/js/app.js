"use strict";function handleNetworkChange(e){navigator.onLine?(document.body.classList.remove("offline"),document.getElementById("offline-alert").classList.add("hidden"),setFormFields(!1)):(document.body.classList.add("offline"),document.getElementById("offline-alert").classList.remove("hidden"),setFormFields(!0))}function setFormFields(e){document.querySelectorAll('form input, form select, form button[type="submit"]').forEach(function(t,n){e?t.setAttribute("disabled",!0):t.removeAttribute("disabled")})}function initialize(){if(null!==pushButton){if(!("PushManager"in window))return console.warn("Push notifications are not supported by this browser"),void updateButton("incompatible");if(!("showNotification"in ServiceWorkerRegistration.prototype))return console.warn("Notifications are not supported by this browser"),void updateButton("incompatible");if("denied"===Notification.permission)return console.warn("Notifications are denied by the user"),pushButton.disabled=!0,void updateButton("incompatible");pushButton.addEventListener("click",function(){isSubscribed?unsubscribeUser():subscribeUser()}),navigator.serviceWorker.ready.then(function(e){return e.pushManager.getSubscription()}).then(function(e){updateButton("disabled"),e&&updateSubscriptionOnServer(e,"PUT").then(function(){updateButton("enabled")})}).catch(function(e){console.error("Error when updating the subscription",e)})}}function subscribeUser(){const e=urlB64ToUint8Array(jsObject.applicationServerPublicKey);updateButton("computing"),navigator.serviceWorker.ready.then(function(t){return console.log("Subscribing.."),t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})}).then(function(e){console.log("User is subscribed."),updateSubscriptionOnServer(e,"POST").then(function(){updateButton("enabled")})}).catch(function(e){"denied"===Notification.permission?(console.warn("Notifications are denied by the user."),updateButton("incompatible")):(console.error("Impossible to subscribe to push notifications",e),updateButton("disabled"))})}function unsubscribeUser(){navigator.serviceWorker.ready.then(function(e){return e.pushManager.getSubscription()}).then(function(e){if(e)return updateSubscriptionOnServer(e,"DELETE"),e;updateButton("disabled")}).then(function(e){e.unsubscribe(),console.log("User is unsubscribed.")}).then(function(){updateButton("disabled")}).catch(function(e){console.error("Error unsubscribing",e),updateButton("disabled")})}function updateSubscriptionOnServer(e,t="POST"){const n=e.getKey("p256dh"),o=e.getKey("auth"),i=(PushManager.supportedContentEncodings||["aesgcm"])[0];return fetch(jsObject.notifications_subscribe,{method:t,credentials:"same-origin",body:JSON.stringify({endpoint:e.endpoint,publicKey:n?btoa(String.fromCharCode.apply(null,new Uint8Array(n))):null,authToken:o?btoa(String.fromCharCode.apply(null,new Uint8Array(o))):null,contentEncoding:i})}).catch(function(e){console.error(e)})}function urlB64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(t),o=new Uint8Array(n.length);for(let e=0;e<n.length;++e)o[e]=n.charCodeAt(e);return o}function updateButton(e){if(null!==pushButton)switch(e){case"enabled":pushButton.disabled=!1,pushButton.textContent=lang.disable_notifications,isSubscribed=!0;break;case"disabled":pushButton.disabled=!1,pushButton.textContent=lang.enable_notifications,isSubscribed=!1;break;case"computing":pushButton.disabled=!0,pushButton.textContent=lang.loading;break;case"incompatible":pushButton.disabled=!0,pushButton.textContent=lang.no_notifications_possible;break;default:console.error("Unhandled push button state",e)}}window.addEventListener("online",handleNetworkChange),window.addEventListener("offline",handleNetworkChange),handleNetworkChange();const pushButton=document.querySelector(".js-push-btn");let isSubscribed=!1;"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.js?v=20190131").then(function(e){console.log("Service worker successfully registered on scope",e.scope),initialize()}).catch(function(e){console.error("Service Worker Error",e)})});