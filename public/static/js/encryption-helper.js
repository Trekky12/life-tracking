"use strict";function createKeyMaterial(e){let t=new TextEncoder;return window.crypto.subtle.importKey("raw",t.encode(e),{name:"PBKDF2"},!1,["deriveBits","deriveKey"])}function deriveAESKey(e,t,r){return window.crypto.subtle.deriveKey({name:"PBKDF2",salt:t,iterations:r,hash:"SHA-512"},e,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}async function encryptData(e,t){try{const r=window.crypto.getRandomValues(new Uint8Array(16)),n=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:r},e,(new TextEncoder).encode(t)),o=new Uint8Array(n);let c=new Uint8Array(r.byteLength+o.byteLength);c.set(r,0),c.set(o,r.byteLength);return buff_to_base64(c)}catch(e){throw console.error(`Error Encrypting - ${e}`),e}}async function decryptData(e,t){try{const r=base64_to_buf(t),n=r.slice(0,16),o=r.slice(16),c=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:n},e,o);return(new TextDecoder).decode(c)}catch(e){throw console.log(`Error Decrypting - ${e}`),e}}async function createKey(e){return window.crypto.subtle.importKey("raw",e,"AES-GCM",!0,["encrypt","decrypt"])}function buff_to_base64(e){return btoa(String.fromCharCode.apply(null,e))}function base64_to_buf(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(null)))}